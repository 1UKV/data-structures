#BUBBLE SORT

def bubblesort(sequence):
    no_of_swaps=0
    no_of_comparisons=0
    for j in range(len(sequence)-1):
        swapped= False
    
        for i in range(len(sequence)-1-j):
            no_of_comparisons+=1
            if sequence[i]>sequence[i+1]:
                temp=sequence[i]
                sequence[i]=sequence[i+1]
                sequence[i+1]=temp
                swapped=True
                no_of_swaps+= 1
        if swapped == False:
            print("no. of comparisons for bubble sort = ",no_of_comparisons)
            print("no. of swaps for bubble sort = ",no_of_swaps)
            break
sequence=[87,98,65,35,69,95,48,25,41]

bubblesort(sequence)
print("Sorted by bubble sort: ",sequence)

#SELECTION SORT

def selectionSort(sequence):
    no_of_swaps=0
    no_of_comparisons=0
    for j in range(len(sequence)):
        minimum=j
        
        for i in range(minimum+1, len(sequence)):
            no_of_comparisons+=1
            if sequence[i]<sequence[minimum]:
                minimum=i
                
        if j!=minimum:
            (sequence[minimum],sequence[j])=(sequence[j],sequence[minimum])
            no_of_swaps+=1
    print("no. of comparisons for selection sort = ",no_of_comparisons)
    print("no. of swaps for selection sort = ",no_of_swaps)
    
sequence2=[87,98,65,35,69,95,48,25,41]                
selectionSort(sequence2)
print("Sorted by selection sort:Â ",sequence2)


BONUS QUESTION

TIME COMPLEXITY OF BUBBLE SORT
   From the above code of BUBBLE SORT we can see that there are two while loops which will we executed.First while loop will run n-1 times and second while      loop will run n-2 times and so on till 1 time.
   Time Complexity=(n-1)+(n-2)+(n-3)....+2+1=(n-1)(n)/2 = O(n^2)

TIME COMPLEXITY OF SELECTION SORT
    In selection sort the main time consuming task is finding minimum element from the array.We have to scan all the elements of the array to find the       minimum element. With reference to the above code of SELECTION SORT,first we will search for minimum element in array of size n,then in the same array of   size n-1,and so on till array of size 1.
    Time Complexity=(n)+(n-1)+(n-2)...1=(n)(n+1)/2 = O(n^2)

